{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["timeout","App","useState","value","setValue","data","setData","Option","Select","showSearch","setShowSearch","degree","setDegree","idList","setidList","listing","setListing","useEffect","length","getWeather","handleSelect","a","fetch","join","target","weather","json","response","list","console","log","className","Group","defaultValue","size","buttonStyle","onChange","Button","map","item","name","sys","country","description","Math","ceil","main","temp","feels_like","temp_max","temp_min","src","icon","alt","id","placeholder","defaultActiveFirstOption","showArrow","filterOption","notFoundContent","onSearch","clearTimeout","setTimeout","cities","areaList","filter","city","toLowerCase","includes","undefined","style","width","onSelect","d","onClick","PlusOutlined","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d223d344.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport 'antd/dist/antd.css';\nimport { Select, Radio } from 'antd';\nimport areaList from './city.list.json';\nimport { PlusOutlined } from '@ant-design/icons';\n\nlet timeout;\n\nfunction App() {\n  const [value, setValue] = useState('');\n  const [data, setData] = useState([]);\n  const { Option } = Select;\n  const [showSearch, setShowSearch] = useState(false);\n  const [degree, setDegree] = useState('metric');\n  const [idList, setidList] = useState([]);\n  const [listing, setListing] = useState([]); \n\n  useEffect(() => {\n    if(idList.length > 0) {\n      getWeather()\n    }\n  }, [idList, degree])\n  \n  // debouncing\n  const handleSearch = (value) => {\n    clearTimeout(timeout)\n    \n    const fetch = () => {\n      if (value.length > 1) {\n        const cities = areaList.filter((city) =>\n          city.name.toLowerCase().includes(value.toLowerCase())\n        );\n        setData(cities);\n      } else {\n        setData([]);\n      } \n    }\n\n    timeout = setTimeout(fetch, 500);\n    \n  }\n\n  const handleChange = (value) => {\n    setValue(value);\n    setShowSearch(false)\n    setValue(undefined);\n  }\n\n  const handleSelect = (value) => {\n    setidList([...idList, value]);\n    setShowSearch(false)\n    setValue('');\n  }\n\n  const handleAddNew = () => {\n    setShowSearch(true);\n  }\n\n  const handleDegree = (value) => {\n    setDegree(value);\n  }\n  \n  // async function getWeather(value) {\n  const getWeather = async () => {\n    try {\n      // const weather = await (await fetch(`https://api.openweathermap.org/data/2.5/weather?id=${value}&units=metric&appid=0abf4bf351cec72355774d7f99ba0cc8`)).json()\n      const weather = await fetch(`https://api.openweathermap.org/data/2.5/group?id=${idList.join(',')}&units=${typeof degree === \"string\" ? degree : degree.target.value}&appid=0abf4bf351cec72355774d7f99ba0cc8`)\n      let response = await weather.json();\n      setListing([...response.list])\n    } catch(e){\n      console.log(e)\n    }\n  }\n\n  return (\n    <div className=\"App-header\">\n      <div className=\"degree\">\n        <Radio.Group defaultValue=\"metric\" size=\"large\" buttonStyle=\"solid\" onChange={handleDegree}>\n          <Radio.Button value=\"metric\">&#xb0;C</Radio.Button>\n          <Radio.Button value=\"imperial\">&#xb0;F</Radio.Button>\n        </Radio.Group>\n      </div>\n      <div>\n        <h1>Simple Weather</h1>\n      </div>\n      <div className=\"weather-container\">\n        {\n          listing.length > 0 && listing.map(item => (\n            <div className=\"box weather\" key={item.id}>\n              <div className=\"weather-top\">\n                <div className=\"weather-top-main\">\n                  <h2>{`${item.name}-${item.sys.country}`}</h2>\n                  <h3>{item.weather[0].description}</h3>\n                  <p className=\"main-temp\">{Math.ceil(item.main.temp)}&#xb0;{degree === 'metric' ? 'C' : 'F'}</p>\n                </div>\n              </div>\n              <div className=\"weather-bottom\">\n                <div className=\"weather-bottom-main\">\n                  <p>feels like: {Math.ceil(item.main.feels_like)}&#xb0;{degree === 'metric' ? 'C' : 'F'}</p>\n                  <p>max temp: {Math.ceil(item.main.temp_max)}&#xb0;{degree === 'metric' ? 'C': 'F'}</p>\n                  <p>min temp: {Math.ceil(item.main.temp_min)}&#xb0;{degree === 'metric' ? 'C' : 'F'}</p>\n                </div>\n                <img src={`http://openweathermap.org/img/wn/${item.weather[0].icon}@2x.png`} alt={item.weather[0].description} />\n              </div>\n            </div>\n          ))\n        }\n        <div className=\"add-new-container\">\n          <div className=\"box add-new\">\n            {\n              showSearch ? \n                <Select\n                  showSearch\n                  value={value}\n                  placeholder={'City-please enter more than 1 letter'}\n                  defaultActiveFirstOption={false}\n                  showArrow={false}\n                  filterOption={false}\n                  notFoundContent={null}\n                  onSearch={handleSearch}\n                  onChange={handleChange}\n                  style={{ width: '90%' }}\n                  onSelect={(...params) => { handleSelect(...params) }}\n                >\n                  {data.map(d => <Option key={d.id}>{`${d.name}, ${d.country}`}</Option>)}\n                </Select> :\n                <button onClick={handleAddNew}>\n                  <PlusOutlined />\n                </button>\n            }\n          </div>\n        </div>\n      </div>        \n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}